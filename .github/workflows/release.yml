name: release

on:
  release:
    types:
      - published

jobs:
  build:
    name: build application
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: setup gcloud for secret manager
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          service_account_key: ${{ secrets.GCP_SA_SECRETMANAGER_KEY }}
      
      - name: setup gcloud beta components
        run: gcloud components install beta
        shell: bash

      - name: export command to fetch github access token
        run: |
          echo "::set-env name=CMD_FETCH_GITHUB_PAT_MISHAMILOVIDOV::gcloud beta secrets versions access latest --secret=GITHUB_PAT_MISHAMILOVIDOV --quiet --project=osito-oto"
        shell: bash

      - name: mask github access token
        run: echo "::add-mask::$(eval "$CMD_FETCH_GITHUB_PAT_MISHAMILOVIDOV")"
        shell: bash

      - name: export github access token
        run: echo "::set-env name=GITHUB_PAT_MISHAMILOVIDOV::$(eval "$CMD_FETCH_GITHUB_PAT_MISHAMILOVIDOV")"
        shell: bash

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm install

      - name: build application
        run: npm run build

      - name: archive build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

  application:
    name: deploy application
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: setup gcloud for secrets manager
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          service_account_key: ${{ secrets.GCP_SA_SECRETMANAGER_KEY }}

      - name: setup gcloud beta components
        run: gcloud components install beta
        shell: bash

      - name: export command to fetch firebase service account credentials
        run: |
          echo "::set-env name=CMD_FETCH_GCP_SA_FIREBASE_KEY::gcloud beta secrets versions access latest --secret=GCP_SA_FIREBASE_KEY --quiet --project=osito-oto"
          echo "::set-env name=CMD_FETCH_GCP_SA_FIREBASE_EMAIL::gcloud beta secrets versions access latest --secret=GCP_SA_FIREBASE_EMAIL --quiet --project=osito-oto"
        shell: bash

      - name: mask firebase service account key
        run: |
          echo "::add-mask::$(eval "$CMD_FETCH_GCP_SA_FIREBASE_KEY")"
        shell: bash

      - name: export firebase service account credentials
        run: |
          echo "::set-env name=GCP_SA_FIREBASE_KEY::$(eval "$CMD_FETCH_GCP_SA_FIREBASE_KEY")"
          echo "::set-env name=GCP_SA_FIREBASE_EMAIL::$(eval "$CMD_FETCH_GCP_SA_FIREBASE_EMAIL")"
        shell: bash

      - name: setup gcloud for firebase
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '281.0.0'
          service_account_email: ${{ env.GCP_SA_FIREBASE_EMAIL }}
          service_account_key: ${{ env.GCP_SA_FIREBASE_KEY }}

      - name: export command to fetch firebase access token
        run: echo "::set-env name=CMD_FETCH_FIREBASE_TOKEN::gcloud auth print-access-token --quiet --project=osito-oto"
        shell: bash

      - name: mask firebase access token
        run: echo "::add-mask::$(eval "$CMD_FETCH_FIREBASE_TOKEN")"
        shell: bash

      - name: export firebase access token
        run: echo "::set-env name=FIREBASE_TOKEN::$(eval "$CMD_FETCH_FIREBASE_TOKEN")"
        shell: bash

      - name: download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: build

      - name: set firebase project
        uses: w9jds/firebase-action@v1.2.0
        with:
          args: use --add osito-oto
        env:
          FIREBASE_TOKEN: ${{ env.FIREBASE_TOKEN }}

      # - name: deploy firestore indexes
      #   uses: w9jds/firebase-action@v1.2.0
      #   with:
      #     args: deploy --only firestore:indexes
      #   env:
      #     FIREBASE_TOKEN: ${{ env.FIREBASE_TOKEN }}
      
      # - name: deploy firestore rules
      #   uses: w9jds/firebase-action@v1.2.0
      #   with:
      #     args: deploy --only firestore:rules
      #   env:
      #     FIREBASE_TOKEN: ${{ env.FIREBASE_TOKEN }}

      - name: apply target for hosting deploy
        uses: w9jds/firebase-action@v1.2.0
        with:
          args: target:apply hosting mishamilovidov osito-oto
        env:
          FIREBASE_TOKEN: ${{ env.FIREBASE_TOKEN }}

      - name: deploy hosting
        uses: w9jds/firebase-action@v1.2.0
        with:
          args: deploy --only hosting:mishamilovidov
        env:
          FIREBASE_TOKEN: ${{ env.FIREBASE_TOKEN }}